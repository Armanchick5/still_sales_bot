from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message

from standup_ticket_bot.database import AsyncSessionLocal
from standup_ticket_bot.concert_repository import list_concerts
from standup_ticket_bot.keyboards import main_kb
from standup_ticket_bot.models.concert import SourceEnum

router = Router()

SOURCE_ICONS: dict[SourceEnum, str] = {
    SourceEnum.YANDEX: "¬Æ–Ø–Ω–¥–µ–∫—Å",
    SourceEnum.GOSTANDUP: "GOSTANDUP",
    SourceEnum.TIMEPAD: "Timepad",
}

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (~4096),
# –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è —Ç–µ–≥–æ–≤ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
MAX_MESSAGE_SIZE = 3800


async def _send_concerts(message: Message, concerts: list, title: str) -> None:
    if not concerts:
        await message.answer(
            "–ö–æ–Ω—Ü–µ—Ä—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=main_kb
        )
        return

    header = f"<b>{title}</b>\n\n"
    chunk = header

    for ev in concerts:
        icon = SOURCE_ICONS.get(ev.source, ev.source.name)
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º UTC –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ (UTC+3)
        dt_local = ev.date + timedelta(hours=3)
        dt_str = dt_local.strftime("%Y-%m-%d %H:%M")

        # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–¥–∞–∂
        now = datetime.utcnow()
        delta = ev.date - now
        days_left = delta.total_seconds() / 86400
        sold_pct = ev.tickets_sold / ev.tickets_total if ev.tickets_total else 0

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Ä–∫–µ—Ä —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª–æ–≤–∏–π
        if days_left < 3:
            marker = "üî¥ " if sold_pct < 0.7 else "üü¢ "
        elif days_left < 7:
            marker = "üü† " if sold_pct < 0.5 else "üü¢ "
        elif days_left < 14:
            marker = "üü° " if sold_pct < 0.3 else "üü¢ "
        else:
            marker = "üü¢ "

        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫ –±–µ–∑ —Å—Å—ã–ª–∫–∏
        block = (
            f"{marker}{icon}\n"
            f"<b>{ev.name}</b>\n"
            f"{dt_str}\n"
            f"{ev.tickets_sold}/{ev.tickets_total}\n\n"
        )

        # –ï—Å–ª–∏ –±–ª–æ–∫ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
        if len(chunk) + len(block) > MAX_MESSAGE_SIZE:
            await message.answer(
                chunk,
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=main_kb
            )
            chunk = header + block
        else:
            chunk += block

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫
    if chunk.strip():
        await message.answer(
            chunk,
            parse_mode="HTML",
            disable_web_page_preview=True,
            reply_markup=main_kb
        )


@router.message(Command("start"))
async def start_handler(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å—Ç–µ–Ω–¥–∞–ø-–∫–æ–Ω—Ü–µ—Ä—Ç—ã.\n"
        "–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–æ–Ω—Ü–µ—Ä—Ç—ã.",
        reply_markup=main_kb,
    )


@router.message(F.text == "–í—Å–µ –∫–æ–Ω—Ü–µ—Ä—Ç—ã")
async def all_concerts_handler(message: Message):
    async with AsyncSessionLocal() as session:
        concerts = await list_concerts(session, days_ahead=None)
    await _send_concerts(message, concerts, "–í—Å–µ –∫–æ–Ω—Ü–µ—Ä—Ç—ã")


@router.message(F.text == "–ë–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è")
async def concerts_3_days_handler(message: Message):
    async with AsyncSessionLocal() as session:
        concerts = await list_concerts(session, days_ahead=3)
    await _send_concerts(message, concerts, "–ö–æ–Ω—Ü–µ—Ä—Ç—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è")


@router.message(F.text == "–ë–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π")
async def concerts_7_days_handler(message: Message):
    async with AsyncSessionLocal() as session:
        concerts = await list_concerts(session, days_ahead=7)
    await _send_concerts(message, concerts, "–ö–æ–Ω—Ü–µ—Ä—Ç—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π")


@router.message(F.text == "–ë–ª–∏–∂–∞–π—à–∏–µ 21 –¥–µ–Ω—å")
async def concerts_21_days_handler(message: Message):
    async with AsyncSessionLocal() as session:
        concerts = await list_concerts(session, days_ahead=21)
    await _send_concerts(message, concerts, "–ö–æ–Ω—Ü–µ—Ä—Ç—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 21 –¥–µ–Ω—å")
